class card
    #attributes
    card rank 
    card suits
    value of card
    #behavior
   '__init__(self,rank,suit)': initialize card with rank and suit
    'get_value(self)': get value of card
    '__str__(self)': return a human-readable representation of the card
class deck
    #attributes
    list of card objects(52 cards)
    #behavior
    '__init__(self)': initialize the deck with a list of cards
    'shuffle(self)': shuffle the deckdeal a card from the deck
    '__str__(self)': return a human-readable representation of the deck
class player
    #attributes
    player's hand
    #behavior
    '__init__(self)': initialize the player's hand
    'add_card(self, card)': add a card to players hand
    'get_hand_value(self)': calculate value of player's hand
    '__str__(self)': return a human-readable representation of player's hand.
class dealer(inherits from player)
    #behavior
    'play(self, deck)': dealer's play logic - hit until hand value is 17 or greater
    'reveal_all_cards(self)': reveal all dealer's cards
class game
    #attributes
    player object
    dealer object
    deck object
    #behavior
    '__init__(self)': initialize the game with player, dealer, and deck objects
    'start(self)': start game, dealing initial cards and executing player and dealer turns
    'player_turn(self)': allow player to play their turn
    'dealer_turn(self)': allow dealer to play their turn
    'display_results(self)': determine and display the game ooutcome.



import random
import colorama
from colorama import Fore, Style, Back

SUITS = [f'{Fore.BLACK}{Style.BRIGHT}♠{Fore.WHITE}{Style.NORMAL}', f'{Fore.RED}{Style.BRIGHT}♥{Fore.WHITE}{Style.NORMAL}', f'{Fore.RED}{Style.BRIGHT}♦{Fore.WHITE}{Style.NORMAL}', f'{Fore.BLACK}{Style.BRIGHT}♣{Fore.WHITE}{Style.NORMAL}']
RANKS = ["A", 2, 3, 4, 5, 6, 7, 8, 9, 10, "J", "Q", "K"]


class Deck:
    def __init__(self, suits, ranks):
        self.cards = []
        for suit in suits:
            for rank in ranks:
                card = Card(suit, rank, value=0)
                if card.rank in ["J", "Q", "K"]:
                    card.value = 10
                elif card.rank == "A":
                    card.value = 11
                else:
                    card.value = card.rank
                self.cards.append(card)
    
    def shuffle(self):
        random.shuffle(self.cards)
    
    def draw_card(self):
        card = self.cards.pop()
        return card


# directions for building a card for us
class Card:
    def __init__(self, suit, rank, value):
        self.suit = suit
        self.rank = rank
        self.value = value
    
    def __str__(self):
        return f'{self.suit}  {self.rank}'
    

class Player:
    def __init__(self):
        self.name = input("Please enter your name: ")
        self.hand = []
        self.score = 0


class Dealer:
    def __init__(self):
        self.name = "Dealer Kate"
        self.hand = []
        self.score = 0


class Game:
    def __init__(self):
        self.deck = Deck(SUITS, RANKS)
        self.deck.shuffle()
        self.player = Player()
        self.dealer = Dealer()

    def play_game(self):
        self.dealer.hand.append(self.deck.draw_card())
        while len(self.player.hand) < 2:
            self.player.hand.append(self.deck.draw_card())
        print(self.player.name)
        for card in self.player.hand:
            self.player.score += card.value
            print(card)
        print(self.player.score)

        while len(self.dealer.hand) < 2:
            self.dealer.hand.append(self.deck.draw_card())
        print(self.dealer.name)
        for card in self.dealer.hand:
            self.dealer.score += card.value
            print(card)
        print(self.dealer.score)
        if self.player.score == 21 or self.dealer.score == 21:
            if self.dealer.score < 21:
                print("Player has blackjack!")
                return
            elif self.player.score < 21:
                print("Dealer has blackjack!")
                return
            else:
                print("You pushed!")
                return
        if self.player.score < 21:
            self.player_hit()
        if self.player.score <= 21:
            self.dealer_hit()

    def player_hit(self):
        action = None
        while action != 's':
            action = input("[H]it or [S]tay? ").lower().strip()
            if action == "h":
                self.player.hand.append(self.deck.draw_card())
                self.player.score = sum(
                    card.value for card in self.player.hand)
                if "A" in [card.rank for card in self.player.hand] and self.player.score > 21:
                    self.player.score -= 10

                print("Player hand:", )
                for card in self.player.hand:
                    print(card)
                print("Your score:", self.player.score)
                if self.player.score > 21:
                    print("Bust!")
                    break
                elif self.player.score == 21:
                    print("You got blackjack!")
                    break
            elif action != 's':
                print("Invalid choice, enter 'h' or 's'")
        else:
            print("You chose to stay")

    def dealer_hit(self):
        print("Dealer's turn:")
        while self.dealer.score < 17:
            self.dealer.hand.append(self.deck.draw_card())
            self.dealer.score = sum(
                card.value for card in self.dealer.hand)
            print("Dealer hand:")
            for card in self.dealer.hand:
                print(card)
            print("Dealer score:", self.dealer.score)
            if self.dealer.score > 21:
                print("Dealer busts!!")
                break
            elif self.dealer.score == 21:
                print("dealer got blackjack!")
                break


new_game = Game()
new_game.play_game()





# Write your blackjack game here.







while True:
    new_game.play_game()
    play_again = input("Place Bet? (y/n) ").lower()
    if play_again != "y":
        break